diff --unified --recursive zfs-2.0.3/cmd/zed/zed.d/history_event-zfs-list-cacher.sh.in zfs-2.0.3-modified/cmd/zed/zed.d/history_event-zfs-list-cacher.sh.in
--- zfs-2.0.3/cmd/zed/zed.d/history_event-zfs-list-cacher.sh.in	2021-03-14 02:02:57.421606878 -0500
+++ zfs-2.0.3-modified/cmd/zed/zed.d/history_event-zfs-list-cacher.sh.in	2021-03-14 02:05:43.433021344 -0500
@@ -51,7 +51,8 @@
               org.openzfs.systemd:requires-mounts-for| \
               org.openzfs.systemd:before|org.openzfs.systemd:after| \
               org.openzfs.systemd:wanted-by|org.openzfs.systemd:required-by| \
-              org.openzfs.systemd:nofail|org.openzfs.systemd:ignore \
+              org.openzfs.systemd:nofail|org.openzfs.systemd:ignore| \
+              org.openzfs.systemd:keyname \
             ) ;;
             *) exit 0 ;;
         esac
@@ -71,7 +72,8 @@
 ,org.openzfs.systemd:requires,org.openzfs.systemd:requires-mounts-for\
 ,org.openzfs.systemd:before,org.openzfs.systemd:after\
 ,org.openzfs.systemd:wanted-by,org.openzfs.systemd:required-by\
-,org.openzfs.systemd:nofail,org.openzfs.systemd:ignore"
+,org.openzfs.systemd:nofail,org.openzfs.systemd:ignore\
+,org.openzfs.systemd:keyname"
 
 "${ZFS}" list -H -t filesystem -o $PROPS -r "${ZEVENT_POOL}" > "${FSLIST_TMP}"
 
diff --unified --recursive zfs-2.0.3/cmd/zed/zed.d/zed.rc zfs-2.0.3-modified/cmd/zed/zed.d/zed.rc
--- zfs-2.0.3/cmd/zed/zed.d/zed.rc	2021-03-14 02:02:57.941636701 -0500
+++ zfs-2.0.3-modified/cmd/zed/zed.d/zed.rc	2021-03-14 02:05:43.433021344 -0500
@@ -118,7 +118,7 @@
 # Otherwise, if ZED_SYSLOG_SUBCLASS_EXCLUDE is set, the
 # matching subclasses are excluded from logging.
 #ZED_SYSLOG_SUBCLASS_INCLUDE="checksum|scrub_*|vdev.*"
-ZED_SYSLOG_SUBCLASS_EXCLUDE="history_event"
+#ZED_SYSLOG_SUBCLASS_EXCLUDE="history_event"
 
 ##
 # Use GUIDs instead of names when logging pool and vdevs
diff --unified --recursive zfs-2.0.3/etc/systemd/system-generators/zfs-mount-generator.in zfs-2.0.3-modified/etc/systemd/system-generators/zfs-mount-generator.in
--- zfs-2.0.3/etc/systemd/system-generators/zfs-mount-generator.in	2021-03-14 02:02:58.391663172 -0500
+++ zfs-2.0.3-modified/etc/systemd/system-generators/zfs-mount-generator.in	2021-03-14 13:58:11.312900696 -0500
@@ -69,6 +69,9 @@
   do_fail "zero or three arguments required"
 fi
 
+# for synchronization of $previous_keyloadunit across subshells
+previous_keyloadunit_file="/run/previous_keyloadunit"
+
 pools=$(zpool list -H -o name || true)
 
 # All needed information about each ZFS is available from
@@ -77,7 +80,6 @@
 # See the list below for the properties and their order
 
 process_line() {
-
   # zfs list -H -o name,...
   # fields are tab separated
   IFS="$(printf '\t')"
@@ -105,6 +107,9 @@
   p_systemd_requiredby="${18}"
   p_systemd_nofail="${19}"
   p_systemd_ignore="${20}"
+  p_systemd_keyname="${21}"
+
+  previous_keyloadunit=$(head -n 1 "${previous_keyloadunit_file}")
 
   # Minimal pre-requisites to mount a ZFS dataset
   # By ordering before zfs-mount.service, we avoid race conditions.
@@ -149,7 +154,7 @@
 
   if [ -n "${p_systemd_requires}" ] && \
       [ "${p_systemd_requires}" != "-" ] ; then
-    requires="Requires=${p_systemd_requires}"
+    requires="${p_systemd_requires}"
   fi
 
   if [ -n "${p_systemd_requiresmountsfor}" ] && \
@@ -157,6 +162,11 @@
     requiredmounts="RequiresMountsFor=${p_systemd_requiresmountsfor}"
   fi
 
+  if [ -n "${p_systemd_keyname}" ] && \
+      [ "${p_systemd_keyname}" != "-" ]; then
+    keyname="zfs:${p_systemd_keyname}"
+  fi
+
   # Handle encryption
   if [ -n "${p_encroot}" ] &&
       [ "${p_encroot}" != "-" ] ; then
@@ -172,21 +182,30 @@
         keyloadscript="@sbindir@/zfs load-key \"${dataset}\""
       elif [ "${p_keyloc}" = "prompt" ] ; then
         keyloadscript="\
-count=0;\
-while [ \$\$count -lt 3 ];do\
-  systemd-ask-password --id=\"zfs:${dataset}\"\
-    \"Enter passphrase for ${dataset}:\"|\
-    @sbindir@/zfs load-key \"${dataset}\" && exit 0;\
-  count=\$\$((count + 1));\
-done;\
-exit 1"
+keyavail=\"\";                                                            \
+keyctl request user \"${keyname}\" && keyavail=t;                         \
+                                                                          \
+[ ! -z \$\$keyavail ] &&                                                  \
+  keyctl print \$\$(keyctl request user \"${keyname}\") |                 \
+    @sbindir@/zfs load-key \"${dataset}\" && exit 0;                      \
+                                                                          \
+count=0;                                                                  \
+while [ \$\$count -lt 3 ]; do                                             \
+  secret=\$\$(systemd-ask-password \"Enter passphrase for ${dataset}:\"); \
+  echo -n \"\$\${secret}\" | @sbindir@/zfs load-key \"${dataset}\" &&     \
+    k=\$\$(keyctl add user \"${keyname}\" \"\$\${secret}\" @u) &&         \
+    keyctl timeout \"\$\${k}\" 300 &&                                     \
+    exit 0;                                                               \
+  count=\$\$((count + 1));                                                \
+done;                                                                     \
+exit 1;                                                                   \
+"
       else
         printf 'zfs-mount-generator: (%s) invalid keylocation\n' \
           "${dataset}" >/dev/kmsg
       fi
       keyloadcmd="\
 /bin/sh -c '\
-set -eu;\
 keystatus=\"\$\$(@sbindir@/zfs get -H -o value keystatus \"${dataset}\")\";\
 [ \"\$\$keystatus\" = \"unavailable\" ] || exit 0;\
 ${keyloadscript}'"
@@ -213,12 +232,13 @@
 SourcePath=${cachefile}
 Documentation=man:zfs-mount-generator(8)
 DefaultDependencies=no
-Wants=${wants}
-After=${after}
-${requires}
+Wants=${wants} ${previous_keyloadunit}
+After=${after} ${previous_keyloadunit}
+Requires=${requires}
 ${keymountdep}
 
 [Service]
+KeyringMode=shared
 Type=oneshot
 RemainAfterExit=yes
 # This avoids a dependency loop involving systemd-journald.socket if this
@@ -226,7 +246,11 @@
 StandardOutput=null
 StandardError=null
 ExecStart=${keyloadcmd}
-ExecStop=${keyunloadcmd}"   > "${dest_norm}/${keyloadunit}"
+ExecStop=${keyunloadcmd}" > "${dest_norm}/${keyloadunit}"
+      # used to create arbitrarily ordered chain of load-key dependencies.
+      # arbitrary because don't care which key is loaded first
+      # ordered because without it, password prompts are interleaved
+      echo -n "${keyloadunit}" > "${previous_keyloadunit_file}"
     fi
     # Update the dependencies for the mount file to want the
     # key-loading unit.
@@ -443,7 +467,7 @@
 After=${after}
 Wants=${wants}
 ${bindsto}
-${requires}
+Requires=${requires}
 ${requiredmounts}
 
 [Mount]
@@ -455,19 +479,26 @@
   # Finally, create the appropriate dependencies
   create_dependencies "${mountfile}" "wants" "$wantedby"
   create_dependencies "${mountfile}" "requires" "$requiredby"
+}
 
+main() {
+  # Used to share a variable with subshell
+  touch "${previous_keyloadunit_file}"
+  for cachefile in "${FSLIST}/"* ; do
+    # Disable glob expansion to protect against special characters when parsing.
+    set -f
+    # Sort cachefile's lines by canmount, "on" before "noauto"
+    # and feed each line into process_line
+    sort -t "$(printf '\t')" -k 3 -r "${cachefile}" | \
+      # subshell is necessary for `sort|while read` and $noauto_files
+      (
+        noauto_files=""
+        while read -r fs ; do
+          process_line "${fs}"
+        done
+      )
+  done
+  rm "${previous_keyloadunit_file}"
 }
 
-for cachefile in "${FSLIST}/"* ; do
-  # Disable glob expansion to protect against special characters when parsing.
-  set -f
-  # Sort cachefile's lines by canmount, "on" before "noauto"
-  # and feed each line into process_line
-  sort -t "$(printf '\t')" -k 3 -r "${cachefile}" | \
-  ( # subshell is necessary for `sort|while read` and $noauto_files
-    noauto_files=""
-    while read -r fs ; do
-      process_line "${fs}"
-    done
-  )
-done
+main
diff --unified --recursive zfs-2.0.3/man/man8/zfs-mount-generator.8.in zfs-2.0.3-modified/man/man8/zfs-mount-generator.8.in
--- zfs-2.0.3/man/man8/zfs-mount-generator.8.in	2021-03-14 02:02:58.841689761 -0500
+++ zfs-2.0.3-modified/man/man8/zfs-mount-generator.8.in	2021-03-14 13:03:28.921684863 -0500
@@ -184,6 +184,14 @@
 If set to
 .BR on ,
 do not generate a mount unit for this dataset.
+.TP 4
+.BR org.openzfs.systemd:keyname = keyname
+Encrypted datasets with a keylocation of
+.BR prompt
+can have their password cached for 5 minutes in the root user's kernel
+keyring. If a password already exists in the cache and it is successfully loaded
+for a dataset, no prompt will be given. So multiple datasets - even those that
+don't share a common parent - can be unlocked with one password entry.
 
 .RE
 See also
